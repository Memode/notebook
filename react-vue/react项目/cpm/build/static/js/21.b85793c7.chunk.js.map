{"version":3,"sources":["components/capamodals/uecmodal.js"],"names":["__webpack_require__","_antd","_reactRedux","_capaReducer","_staffReducer","_deptReducer","UECModal","connect","state","loginUser","userReducer","sumaryCapacity","capaReducer","selectedStaffList","staffReducer","employeese","staffData","object","toggleCapaModalState","getStaffList","getDeptList","searchAll","selectedStaff","props","_this","_classCallCheck","this","_getPrototypeOf","call","defaultValue","min","max","handleCancel","bind","_assertThisInitialized","handleOk","onChange","React","Component","params","_this2","_this$props","currentSelectedEmployee","map","e","i","length","userId","key","residuePicQuota","id","cloudUserId","type","modifyType","spaceQuota","batchUpdate","Modal","error","title","centered","content","okText","cancelText","_this$props2","Math","floor","employeeResidue","spaceTotal","spacePicUsed","apply","setState","_this3","http","put","then","res","data","code","success","userRole","msg","val","_react2","default","createElement","width","visible","autoFocus","onCancel","footer","Button","onClick","InputNumber","style","size","color","fontSize"],"mappings":"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","file":"static/js/21.b85793c7.chunk.js","sourcesContent":["//设置员工容量（update employee capacity）\r\nimport React from 'react'\r\nimport {Modal,Button,InputNumber} from 'antd'\r\nimport {connect} from 'react-redux'\r\nimport http from 'libs/http'\r\nimport {toggleCapaModalState,searchAll} from 'store/capaReducer'\r\nimport {getStaffList,selectedStaff} from 'store/staffReducer'\r\nimport {getDeptList} from 'store/deptReducer'\r\n@connect(\r\n    state=>{\r\n        return{\r\n            loginUser:state.userReducer,\r\n            sumaryCapacity:state.capaReducer.sumaryCapacity,\r\n            selectedStaffList:state.staffReducer.selectedStaffList,\r\n            employeese:state.staffReducer.staffData.object,\r\n        }\r\n    },\r\n    {toggleCapaModalState,getStaffList,getDeptList,searchAll,selectedStaff}\r\n)\r\nclass UECModal extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            defaultValue:1,\r\n            //加减容量的最大最小值\r\n            min:0,\r\n            max:0\r\n        }\r\n        this.handleCancel=this.handleCancel.bind(this)\r\n        this.handleOk=this.handleOk.bind(this)\r\n        this.onChange=this.onChange.bind(this)\r\n    }\r\n    handleOk(){\r\n        //selectedStaffList只有userId\r\n        const {selectedStaffList,sumaryCapacity,employeese} =this.props\r\n        let currentSelectedEmployee=selectedStaffList.map(e=>{\r\n            //每个员工剩余容量\r\n            for(let i=0;i<employeese.length;i++){\r\n                if(employeese[i].userId===e.key){\r\n                    return employeese[i]\r\n                    break\r\n                }\r\n            }\r\n        })\r\n        //判断当前设置的容量是否合理(注意零界条件)\r\n        if(selectedStaffList.length*this.state.defaultValue<=sumaryCapacity.residuePicQuota){\r\n            let params\r\n            if(this.state.defaultValue>0){\r\n                //增加容量,modifyType修改类型（人员p，部门d，文库l）\r\n                params=currentSelectedEmployee.map(e=>{\r\n                    return {id:e.cloudUserId,type:1,modifyType:'p',spaceQuota:this.state.defaultValue}\r\n                })\r\n            }else{\r\n                //减少容量\r\n                params=currentSelectedEmployee.map(e=>{\r\n                    return {id:e.cloudUserId,type:0,modifyType:'p',spaceQuota:-this.state.defaultValue}\r\n                })\r\n            }\r\n            \r\n            this.batchUpdate(params)\r\n        }else{\r\n            Modal.error({\r\n                title: '系统提示',\r\n                centered:true,\r\n                content: '当前企业剩余容量不足',\r\n                okText:'确定',\r\n                cancelText:'取消'\r\n            })\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        //selectedStaffList只有userId\r\n        let {sumaryCapacity,selectedStaffList,employeese} = this.props\r\n        //企业剩余容量除以选中的人数\r\n        let max=Math.floor(sumaryCapacity.residuePicQuota/selectedStaffList.length)\r\n        //员工剩余容量\r\n        let employeeResidue=selectedStaffList.map(e=>{\r\n            //每个员工剩余的量\r\n            for(let i=0;i<employeese.length;i++){\r\n                if(employeese[i].userId===e.key){\r\n                    return employeese[i].spaceTotal-employeese[i].spacePicUsed\r\n                    break\r\n                }\r\n            }\r\n        })\r\n        let min = -Math.min.apply(null,employeeResidue)\r\n        this.setState({\r\n            min:min,\r\n            max:max\r\n        })\r\n    }\r\n    //Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application\r\n    componentWillUnmount(){\r\n        this.setState({\r\n            max:0,\r\n            min:0\r\n        })\r\n    }\r\n    batchUpdate(params){\r\n        http.put('enterprise/spaceQu/batchUpdate',params).then(res=>{\r\n            if(res.data.code===200){\r\n                Modal.success({\r\n                    title: '系统提示',\r\n                    centered:true,\r\n                    content: '操作成功!',\r\n                })\r\n                //请求成功，刷新部门容量、容量使用概述、员工容量列表\r\n                this.props.getDeptList({type:this.props.loginUser.userRole})\r\n                this.props.getStaffList()\r\n                this.props.searchAll()\r\n                this.props.toggleCapaModalState('SET_EMP_CAPA',false)\r\n                //操作之后刷新数据（操作selectedRowKeys）\r\n                this.props.selectedStaff([])\r\n                this.setState({defaultValue:1})\r\n            }else{\r\n                Modal.success({\r\n                    title: '系统提示',\r\n                    centered:true,\r\n                    content: res.data.msg,\r\n                })\r\n            }\r\n        })\r\n    }\r\n    //修改的容量\r\n    onChange(val){\r\n        this.setState({\r\n            defaultValue:val\r\n        })\r\n    }\r\n    handleCancel(){\r\n        this.props.toggleCapaModalState('SET_EMP_CAPA',false)\r\n    }\r\n    //容量可以加减\r\n    render(){\r\n        return(\r\n            <Modal\r\n                width={350}\r\n                visible={true}\r\n                autoFocus={true}\r\n                title=\"设置员工容量(单位：G)\" centered\r\n                onCancel={this.handleCancel}\r\n                footer={[\r\n                    <Button key='1'  onClick={this.handleCancel}>取消</Button>,\r\n                    <Button  key='2' type=\"primary\"  onClick={this.handleOk}>保存</Button>,\r\n                ]}\r\n                >\r\n                <div>\r\n                    <InputNumber style={{width:'200px'}} autoFocus size='large'  min={this.state.min} max={this.state.max} defaultValue={this.state.defaultValue} onChange={this.onChange} />\r\n                </div>\r\n                <div style={{color:'#666666',fontSize:'14px',}}>修改的容量是在已有容量的基础上增加或减少且不能低于已用的容量</div>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UECModal"],"sourceRoot":""}